{"version":3,"sources":["components/Personform.js","components/Person.js","components/ListPersons.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Personform","props","onSubmit","addNameNumber","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Person","person","erasePersonId","name","number","onClick","id","ListPersons","persons","map","key","axios","get","then","response","data","newObject","post","delete","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","Message","setMessage","useEffect","console","log","personService","initialPersons","event","preventDefault","target","rows","rows_number","noSpace","toString","trim","noSpace_number","includes","window","alert","nameObject","newPerson","concat","setTimeout","personToDelete","find","p","personsToRemain","filter","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92a8271b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Personform =(props)=>{\n    return(\n        <form onSubmit = {props.addNameNumber}> \n      \n      <div>\n      name: <input\n      value = {props.newName}\n      onChange = {props.handleNameChange}\n      />\n      </div>\n\n      <div>\n      number: <input\n      value = {props.newNumber}\n      onChange = {props.handleNumberChange}\n      />\n      </div>\n       \n      <div>\n        <button type=\"submit\">add person</button>\n      </div>\n\n    </form>\n    )\n\n}\n\nexport default Personform","import React from 'react'\n\nconst Person = ({person, erasePersonId}) =>{\n    //Funkar om du tar onClick = {erasePersonId}\n    return(\n        <li>\n        {person.name+', '}\n        {person.number+' '}\n        <button onClick={()=>erasePersonId(person.id)}>Delete</button>\n        </li>\n    )\n}\nexport default Person","import React from 'react'\nimport Person from './Person'\n\n\nconst ListPersons = ({persons, erasePersonId}) => persons.map(person =>\n  <Person\n  key = {person.name} person = {person} id = {person.id} erasePersonId = {erasePersonId}/>\n    \n    )\n\n    export default ListPersons","import axios from 'axios'\nconst baseUrl =  '/api/persons'   //'https://ch-phonebook.herokuapp.com/api/persons'\n\nconst getAll = () => {\n  const request= axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request =axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\n\nconst erase = (id) =>{\n    //const request = axios.delete('http://localhost:3001/api/persons/4')\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { \n  getAll, \n  create,\n  erase \n}\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"info\">\n        {message}\n      </div>\n    )\n  }\n  export default Notification","import React, { useState, useEffect } from 'react'\nimport Personform from './components/Personform'\nimport ListPersons from './components/ListPersons'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\n//Exercises 2.19\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [Message, setMessage] = useState(null)\n\n  //***GET ALL DATA FROM DATABASE***\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  //***ADD DATA TO DATABASE***\n  const addNameNumber = (event) => {\n    event.preventDefault()\n    console.log('Clicked button', event.target)\n\n    const rows = () => persons.map(person => person.name)\n    const rows_number = () => persons.map(person => person.number)\n\n    console.log('Dessa förnamn har vi innan läggs till', rows())\n\n    /* Trying to make sure whitespaces cannot disturb contain-function with newName*/\n    var string = toString(newName)\n    var noSpace = string.trim()\n\n    var string_number = toString(newNumber)\n    var noSpace_number = string_number.trim()\n\n    if (rows().includes(newName) || rows().includes(noSpace)) {\n      window.alert(newName + ' is already in phonebook')\n    }\n    if (rows_number().includes(newNumber) || rows_number().includes(noSpace_number)) {\n      window.alert(newNumber + \" is already in phonebook\")\n      \n    } \n    else {\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n      }\n      personService\n        .create(nameObject)\n        .then(newPerson => {\n          setPersons(persons.concat(newPerson))\n          setNewName('')\n          setNewNumber('')\n          setMessage(\n            `Person named '${nameObject.name}' was added`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n\n        })\n\n    }\n  }\n  //***REMOVE DATA FROM DATABASE***\n  const erasePersonId = (id) => {\n    console.log('taking in id:s here ' + id + \" id\")\n    let personToDelete = persons.find(p => p.id === id)\n    let personsToRemain = persons.filter(p => p.id !== id)\n    console.log(\"Persons to temain; \" + personsToRemain)\n\n    if (window.confirm(\"Are you sure you want to erase \" + personToDelete.name + \" ?\")) {\n      personService\n        .erase(id)\n        .then(\n          console.log(`We jus erased ${personToDelete.name} with id ${personToDelete.id}`),\n          setPersons(personsToRemain)\n        )\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log('new name to add ' + event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    console.log('new number to add ' + event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  console.log(persons)\n\n  //***RETURN ALL DATA IN CORRECT FORMAT***\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={Message} />\n      <h3>Add a new person</h3>\n   \n      <Personform addNameNumber={addNameNumber}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n\n      <ListPersons persons={persons} erasePersonId={erasePersonId} />\n      ...\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}